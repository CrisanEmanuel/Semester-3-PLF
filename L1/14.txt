14.
a) Dandu-se o lista liniare, se cere sa se elimine elementele din N in N.
b) Sa se scrie o functie care sa testeze daca o lista liniara formata din numere intregi are aspect de "vale"(o secvență se spune ca are aspect de "vale" daca elementele descresc pana la un moment dat, apoi cresc. De ex. 10 8 6 17 19 20).
c) Sa se construiasca o functie care intoarce minimul atomilor numerici dintr-o lista, de la orice nivel.
d) Sa se scrie o functie care sterge dintr-o lista liniara toate aparitiile elementului maxim numeric.

a)aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
(defun _sterge-din-n-in-n (l n contor)
	(cond
		((null l) nil)
		((= contor 1) (_sterge-din-n-in-n (cdr l) n n))
		(T (cons (car l) (_sterge-din-n-in-n (cdr l) n (- contor 1))))
	)
)
(defun sterge-din-n-in-n (l n)
	(_sterge-din-n-in-n l n n)
)

(print (sterge-din-n-in-n '(1 2 3 4 5 6 7 8) 3))

MODEL MATEMATIC:
                                   { nil                                           daca l1..ln este goala
_sterge-din-n-in-n(l1..ln, n, n) = { _sterge-din-n-in-n(l2..ln, n, n)              daca contor = 1
				   { l1 U _sterge-din-n-in-n(l2..ln, n, contor-1)  altfel	

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa


b)bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
(defun _vale (l decreasing)
	(cond
		((= (list-length l) 1) (if decreasing nil T))
		((and (> (car l) (cadr l)) (not decreasing)) nil)
		((and (< (car l) (cadr l)) decreasing) (_vale (cdr l) nil))
		(T (_vale (cdr l) decreasing))
	)
)

(defun vale (l)
	(if (< (list-length l) 3)
		nil
		(_vale l T)
	)
)

(print (vale '(15 14 3 44)))


MODEL MATEMATIC:
                          { true               daca list-lenght(l1..ln) = 1 si descresc e nil
_vale(l1..ln, true) =     { nil                daca l1 > l2 si descresc e nil
                          { vale(l2..ln, nil)  daca l1 < l2 si descresc e true
                          {_vale(l2..ln, desc) altfel

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

c)ccccccccccccccccccccccccccccccccccccccccccccccccccccc

(defun minim (a b)
    (if (< a b) a b)
)


(defun min_num (l)
    (cond
        ((null l) 999999)
        ((and (null (cdr l)) (numberp (car l))) (car l))
        ((numberp (car l)) (minim (car l) (min_num (cdr l))))
        ((listp (car l)) (minim (min_num (car l)) (min_num (cdr l))))
        (t (min_num (cdr l)))
     )
)

(print (min_num '(1 2 (3 (a) (1 3)) 4 5)))

MODEL MATEMATIC
                  { l1                                      daca l2..ln este goala
min_num(l1..ln) = { minim (l1, min_num(l2..ln))             daca l1 este numar
                  { minim (min_num(l1), min_num(l2..ln))    daca l1 este lista
                  { min_num (l2..ln)                        altfel

cccccccccccccccccccccccccccccccccccccccccccccccccccccc

d)ddddddddddddddddddddddddddddddddddddddddddddddddddddd
(defun lista-max (l)
	(cond
		(and (numberp (car l)) ((= (list-length l) 1)) (car l))
                ((not(numberp (car l)) (lista-max (cdr l)))) 
		(T (max (car l) (lista-max (cdr l))))
	)
)

(print (lista-max '(1 2 3 1)))
; => 3

(defun sterge-aparitii (l e)
	(cond
		((null l) nil)
		((equal (car l) e) (sterge-aparitii (cdr l) e))
		(T (cons (car l) (sterge-aparitii (cdr l) e)))
	)
)

(print (sterge-aparitii '(1 2 1 3 4 1 2) 1))
; => '(2 3 4 2)


(defun sterge-max-element (l)
	(sterge-aparitii l (lista-max l))
)

(print (sterge-max-element '(1 2 1 1 4 5)))
; => '(1 2 1 1 4)

MODEL MATEMATIC:

                    { l1     daca list-lenght = 1
lista-max(l1..ln) = {
                    { max(l1, lista-min(l2..ln))  altfel

                                { nil                                 daca l1..ln este goala
sterge-aparitii(l1..ln, elem) = { sterge-aparitii(l2..ln, elem)       daca elem = l1
                                { l1 U sterge-aparitii(l2..ln, elem)  altfel

sterge-max-element(l1..ln) = { sterge-aparitii(l1..ln, lista-max(l1..ln))

ddddddddddddddddddddddddddddddddddddddddddddddddddddddd